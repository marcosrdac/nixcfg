# TODO
#  VERIFY IF touch FILE EXISTS
#  undo


# interpreter for shell commands (needs to be POSIX compatible)
set shell bash
# shell behaviour
set shellopts '-e'
# internal field separator
#set filesep "\r"
set ifs "\n"
# find stops when there is only one file left
set findlen 0
set noachorfind
# borders around
set drawbox=false
# show hiden files
set hidden=false
set hiddenfiles .*:__pycache__:*.pyc:*.o:node_modules
# scrll before selecting end of list
set scrolloff 8
# show icons
set icons true
# ignore case
set ignorecase true
# numbering files
set number
set relativenumber
# set previewer script
#set previewer "~/.local/bin/file_managing/preview"
set previewer "~/.config/lf/lfimg/preview"
set cleaner "~/.config/lf/lfimg/cleaner"


# Unmap the default mappings
map r
map <space>
map f
map d
map e
map y
map v
map u
map c
map l
map a
map ;
map <bs2>

# quit
map <bs2> updir
map q quit
cmd q quit  # for :q
# open this config file for edition
map ;c config
# recalculate columns
map r :recol; reload
# mappings
#map f find
map f fzy
# use enter to open selected files
map <backspace2> updir
map <enter> open
# use l to open current file
map l open current
# opening another lf wiondow inside selected folder
map L &nohup $TERMINAL -e $FILEBROWSER $f >/dev/null & wait $! && sleep .01 && lf -remote "send $id recol";
# dedicated keys for file opener actions
map e $[ -w "$f" ] || EDITOR='sudoedit'; $EDITOR "$f"
map E &$TERMINAL -e $EDITOR $f
# execute current file (must be executable)
map x $$f
map X !$f
# file selection
map <space> toggle
map J :toggle; down
map K :toggle; up
map v unselect
map <esc> unselect
map V invert
map U clear
# file manipulation
map yy copy
map dd cut
map p paste
map sp paste_symlink
map DD       trash
map <delete> trash
map u        undo
map <c-r>    redo
# copying paths
map yf copy_path --path
map yd copy_path --directory
map yn copy_path --filename
# renaming
map a  vim-rename append word
map I  vim-rename prepend word
map A  vim-rename append WORD
map C  vim-rename change WORD
map cW vim-rename change WORD
map cw vim-rename change word
map cx vim-rename change extension
# setting wallpaper to file
map gw &wal_set $f


cmd recol %{{
  [ -z $1 ] || id=$1
  w=$(tput cols)
  if [ $w -le 52 ]
  then
    lf -remote "send $id set nopreview"
    lf -remote "send $id set ratios 1"
  else
    lf -remote "send $id set preview"
    if [ $w -le 80 ]
    then
      lf -remote "send $id set ratios 2:3"
    elif [ $w -le 160 ]
    then
      lf -remote "send $id set ratios 2:3:5"
    else
      lf -remote "send $id set ratios 2:3:5:8"
    fi
  fi
}}
&lf -remote "send $id recol"


cmd fzy ${{
  path=$(ls -a1 | fzy -p "" -l "$(( $(tput lines) - 1 ))")
  [ -z "$path" ] && exit
  [ -d "$path" ] && cmd='cd' || cmd='select'
  lf -remote "send $id $cmd '$path'"
}}


cmd copy_path &{{
  case $1 in
    --path)      path="$fx" && shift ;;
    --directory) path="$(dirname  "$fx")" && shift ;;
    --filename)  path="$(basename "$fx")" && shift ;;
    *) exit 1;
  esac
  echo -n $path | xclip -i -selection clipboard -f | xclip -i -selection primary
  if [ $? -eq 0 ]
  then
    lf -remote "send $id echo Copied: $path."
  else
    lf -remote "send $id echoerr Could not copy: $path."
  fi
}}

cmd setwallpaper %{{
  wal_set $f
}}

cmd mkdir %{{
  base="$(dirname "$f")"

  if [ $# -lt 1 ]
  then
    printf "Folder name: "
    read ans
    set $ans
  fi

  for folder_name in "$@"
  do
    mkdir -p $base/$folder_name
  done

  [ $# -ne 1 ] && ies=ies || ies=y
  echo "Director$ies created: $@"
}}

cmd touch %{{
  base="$(dirname "$f")"

  if [ $# -lt 1 ]
  then
    printf "Folder name: "
    read ans
    set $ans
  fi

  for file_name in "$@"
  do
    [ ! -w "$(dirname $file_name)" ] && please='sudo'
    $please touch $base/$file_name
  done

  [ $# -ne 1 ] && s=s || s=''
  echo "File$s created: $@"
}}


# rename functions

cmd rename %{{
  base="$(dirname "$f")"
  srcfn="$(basename $f)"
  echo "$srcfn" | grep -q "\." && srcdot='.' && srcext="${srcfn##*.}"
  srcfn="${srcfn%.*}"

  filename_only="" ; extension_only=""
  case $@ in
    -n)
      filename_only=true && shift
      dst="$base/$@$srcdot$srcext" ;;
    -e)
      extension_only=true && shift
      dst="$base/$srcfn$srcdot$@" ;;
    *) dst="$base/$@" ;;
  esac

  for path in "$f" "$dst"
  do
    [ ! -w $(dirname "$path") ] && please='sudo' && break
  done
  [ $# -eq 0 ] && echo "Destination not given." && exit 1
  [ -e "$dst" ] && printf "  Not renamed: "$dst" exists." || $please mv "$f" "$dst"
}}

# vim-like renaming
cmd vim-rename &{{
  # entering command mode
  lf -remote "send $id push :"
  # setting variables
  fn="$(basename $f)"
  name="${fn%.*}"
  echo "$fn" | grep -q "\." && dot='.' && ext="${fn##*.}"
  # reading options
  case "$@" in
    'change WORD') fn='' ;;
    'change word')
      fn=$(printf "$dot$ext")
      go_left=0 && [ ! -z $dot ] && go_left=$(echo "$ext" | wc -c)
      move="$(awk 'BEGIN{ for(c=0; c<'$go_left'; c++) printf "<left>" }')"
      ;;
    'prepend word')
      go_right=$(echo 'rename' | wc -c)
      move="<home>$(awk 'BEGIN{ for(c=0; c<'$go_right' ;c++) printf "<right>" }')"
      ;;
    'append word')
      go_left=0
      [ ! -z $dot ] && go_left=$(echo "$ext" | wc -c)
      move="$(awk 'BEGIN{ for (c=0; c<'$go_left'; c++) printf "<left>" }')"
      ;;
    'change extension')
      fn="$name$dot"
      ;;
    'append WORD') ;;
  esac
  lf -remote "send $id push $(echo "rename $fn$move" | sed 's/\s/<space>/g')"
}}

cmd bkrn $bkrn $fs

cmd paste_symlink %{{
#  SOMEHOW NOT WORKING
#  load=$(lf -remote 'load')
#  mode=$(echo "$load" | sed -n '1p')
#  list=$(echo "$load" | sed '1d')
#  if [ $mode = 'copy' ]
#  then
#    please='' && [ ! -w . ] && please='sudo'
#    for f in $list
#    do
#      $please ln -s "$f" "$(pwd)/$(basename $f)"
#    done
#    lf -remote 'send clear'
#    lf -remote 'send load'
#  fi
}}

cmd config ${{
  LFRC=$XDG_CONFIG_HOME/lf/lfrc
  [ -f $LFRC ] && vim $LFRC || lf -remote $id echoerr no lfrc found
}}

cmd test %{{
  # test stuff here
}}

cmd undo %{{
  undo
  lf -remote "send load"
  lf -remote "send redraw"
}}

cmd redo %{{
  redo
  lf -remote "send load"
  lf -remote "send redraw"
}}

cmd paste &{{
  set `<"${XDG_DATA_HOME:=$HOME/.local/share}/lf/files"`
  mode=$1
  shift
  case $mode in
    copy)
      copy $@ . ;;
    move) 
      lf -remote 'send clear'
      move $@ . ;;
    *) exit 1 ;;
  esac |
    stdbuf -i0 -o0 -e0 tr '\r' '\n' |
    while read -r line
    do
      lf -remote "send $id echo $line" &
    done

  if [ $? -ne 0 ]
  then
    lf -remote "send $id echoerr An error occured when pasting" &
  fi
  lf -remote 'send load' &
}}

cmd trash %{{
  lf -remote 'send unselect'
  trash $fx |
    stdbuf -i0 -o0 -e0 tr '\r' '\n' |
    while read -r line
    do
      lf -remote "send $id echo $line" &
    done
  lf -remote 'send load'
}}

cmd restoretrash &{{
}}

cmd emptytrash &{{
  msg="$(cmdtrash --empty)"
  [ $? = 0 ] && ECHO=echo || ECHO=echoerr
  lf -remote "send load"
  lf -remote "send redraw"
  lf -remote "send $id $ECHO $msg"
}}

# dealing with compacted data

# extract the current file with the right command
cmd extract ${{
    set -f

    base="$(dirname "$f")"
    srcfn="$(basename $f)"
    echo "$srcfn" | grep -q "\." && srcdot='.' && srcext="${srcfn##*.}"
    srcfn="${srcfn%.*}"
    outdir="$srcfn"

    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f ;;
        *.tar.gz|*.tgz) tar xzvf $f ;;
        *.tar.xz|*.txz) tar xJvf $f ;;
        *.zip) unzip "$f" -d "$outdir";;
        *.rar) unrar x $f ;;
        *.7z) 7z x $f ;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar %{{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip %{{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}


# Open command #

cmd open ${{
    [ $1 = current ] && fx="$f"
    for f in $fx
    do
      [ ! -w "$f" ] && please='sudo'
      mimetype=$(file --mime-type $(realpath $f) -b)
      case $mimetype in
        text/*|*/x-empty) $please $EDITOR $f ;;

        *) # open by extension
          echo "$f" | grep -q "\." && ext="${f##*.}"
          case "$ext" in
            *) setsid $OPENER $f >/dev/null 2>/dev/null & ;;
          esac ;;
      esac
    done
}}
